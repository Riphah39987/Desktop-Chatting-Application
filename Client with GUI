import java.net.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;


public class Client  extends JFrame {

    Socket socket;
    BufferedReader br;
    PrintWriter out;

    private JLabel heading = new JLabel("ALI");
    private JTextArea messageArea = new JTextArea();
    private JTextField messageInput = new JTextField();
    private Font font = new Font("Roboto", Font.PLAIN, 20);

    public Client() {
        try {
      System.out.println("Sending request to server...");
    socket = new Socket("127.0.0.1", 7777);
     System.out.println("Connection established.");

        br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
          out = new PrintWriter(socket.getOutputStream());

            createGUI();
            handleEvents();
           startReading();
               startWriting();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleEvents() {
                            
        messageInput.addKeyListener(new KeyListener() {

         @Override
         public void keyTyped(KeyEvent e) {
            
            
         }

         @Override
         public void keyPressed(KeyEvent e) {
            
           
         }

         @Override
         public void keyReleased(KeyEvent e) {
            
             if(e.getKeyCode()== 10){
                 //System.out.println("passed enter button");
                 String contentToSend=messageInput.getText();
                 messageArea.append("Me :"+contentToSend+"\n");
                 out.println(contentToSend);
                 out.flush();
                 messageInput.setText("");
                 messageInput.requestFocus();
             }
            
         }
         
        });
         
     }

    private void createGUI() {
        setSize(450,700);
               
                setLocation(200,40);
            
              setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    
                //coding for component
                
             heading.setFont(font);
             heading.setOpaque(true);
             heading.setBackground( Color.PINK);
  heading.setForeground(Color.BLACK);
heading.setHorizontalAlignment(SwingConstants.CENTER);
           
            
             heading.setPreferredSize(new Dimension(450, 65)); // Set fixed height
        // Adding icons to the heading

        ImageIcon iconBack = new ImageIcon("3.png");
        Image imgBack = iconBack.getImage().getScaledInstance(25, 25, Image.SCALE_DEFAULT);
        ImageIcon iconBackScaled = new ImageIcon(imgBack);
        JLabel back = new JLabel(iconBackScaled);
        back.setBounds(0, 20, 25, 25);
        heading.add(back);

        ImageIcon iconProfile = new ImageIcon("xx.jpeg");
        Image imgProfile = iconProfile.getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT);
        ImageIcon iconProfileScaled = new ImageIcon(imgProfile);
        JLabel profile = new JLabel(iconProfileScaled);
        profile.setBounds(40, 10, 50, 50);
        heading.add(profile);

        ImageIcon iconVideo = new ImageIcon("video.png");
        Image imgVideo = iconVideo.getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT);
        ImageIcon iconVideoScaled = new ImageIcon(imgVideo);
        JLabel video = new JLabel(iconVideoScaled);
        video.setBounds(300, 20, 30, 30);
        heading.add(video);

        ImageIcon iconPhone = new ImageIcon("phone.png");
        Image imgPhone = iconPhone.getImage().getScaledInstance(35, 30, Image.SCALE_DEFAULT);
        ImageIcon iconPhoneScaled = new ImageIcon(imgPhone);
        JLabel phone = new JLabel(iconPhoneScaled);
        phone.setBounds(360, 20, 30, 30);
        heading.add(phone);

        // Message area and input
        messageArea.setFont(font);
        messageArea.setEditable(false);
        messageInput.setFont(font);


        setLayout(new BorderLayout());

        // Adding components to frame
           
        this.add(heading,BorderLayout.NORTH);
        this.add(messageArea,BorderLayout.CENTER);
        this.add(messageInput,BorderLayout.SOUTH);
        

        setVisible(true);

      

        
    }

    // Function to start reading
    public void startReading() {
        Runnable r1 = () -> {
            System.out.println("Reader started...");

            try {
                while (true) {
                    String msg = br.readLine();
                    if (msg.equals("exit")) {
                        System.out.println("Umer is no more available in the chat");
                        JOptionPane.showMessageDialog(this,"Umer terminated the caht");
                        messageInput.setEnabled(false);
                        socket.close();
                        break;
                    }
                    // System.out.println("client : " + msg);
                    messageArea.append("Umer:"+ msg+"\n");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        };

        new Thread(r1).start();
    }

    public void startWriting() {
        // thread for writing data 
        Runnable r2 = () -> {
            System.out.println("writer has started");

            try {
                while (true) {
                    BufferedReader br1 = new BufferedReader(new InputStreamReader(System.in));
                    String content = br1.readLine();
                    out.println(content);
                    out.flush();

                    
                    if(content.equals("exit"))
                    {
                        socket.close();
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        };

        // new thread class ka obejct banaya num ny
        new Thread(r2).start();
    }


    public static void main(String[] args) {
        System.out.println("This is the Umer...");
        new Client();
    }
}
