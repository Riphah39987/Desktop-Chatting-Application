import java.net.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

                                     
class Server extends JFrame {

    
    
        // variable declaration "ServerSocket"  && "server" is the class
        ServerSocket Server;
    
        // class 
        Socket socket;
    
        // for reading data we take two variables;
        BufferedReader br;
        PrintWriter out;

        private JLabel heading =new JLabel("Umer");
        private JTextArea messageArea =new JTextArea();
        private JTextField messageInput = new JTextField();
        private Font font =new Font ("Robot",Font.PLAIN,20);
       // constructor
        /**
         * 
         */
         public Server() {
           
          
            try {
              Server = new ServerSocket(7777);
               System.out.println("ALI is ready to accept the connection");
             System.out.println("waiting for the connection...");
                socket = Server.accept();
    
                 //(getInputStream & getOutputStream) are function and method
               br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
               out = new PrintWriter(socket.getOutputStream());
                createGUI();
                handleEvents();
                               
              startReading();
                                startWriting();
                    
                } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    



                        private void handleEvents() {
                            
                           messageInput.addKeyListener(new KeyListener() {

                            @Override
                            public void keyTyped(KeyEvent e) {
                               
                               
                            }

                            @Override
                            public void keyPressed(KeyEvent e) {
                               
                              
                            }

                            @Override
                            public void keyReleased(KeyEvent e) {
                               
                                if(e.getKeyCode()== 10){
                                    //System.out.println("passed enter button");
                                    String contentToSend=messageInput.getText();
                                    messageArea.append("Me :"+contentToSend+"\n");
                                    out.println(contentToSend);
                                    out.flush();
                                    messageInput.setText("");
                                    messageInput.requestFocus();
                                }
                               
                            }
                            
                           });
                            
                        }
                
                         
                            private void createGUI()
            {
    setTitle("Server chat");
                setSize(450,700);
               
                setLocation(200,40);
            
              setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    
                //coding for component
                
             heading.setFont(font);
             heading.setOpaque(true);
             heading.setBackground( Color.BLUE);
  heading.setForeground(Color.BLACK);
heading.setHorizontalAlignment(SwingConstants.CENTER);
           
            
             heading.setPreferredSize(new Dimension(450, 65)); // Set fixed height
            



             ImageIcon i1 = new ImageIcon("3.png");
             Image i2 = i1.getImage().getScaledInstance(25, 25, Image.SCALE_DEFAULT);
             ImageIcon i3 =new ImageIcon(i2);
             JLabel back =new JLabel(i3);
             back.setBounds(0,20,25,25);
             heading.add(back);


             ImageIcon i4 = new ImageIcon("1.png");
             Image i5 = i4.getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT);
             ImageIcon i6 =new ImageIcon(i5);
             JLabel profile =new JLabel(i6);
             profile.setBounds(40,10,50,50);
             heading.add(profile);

             
             ImageIcon i7 = new ImageIcon("video.png");
             Image i8 = i7.getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT);
             ImageIcon i9 =new ImageIcon(i8);
             JLabel video =new JLabel(i9);
             video.setBounds(300,20,30,30);
             heading.add(video);


             ImageIcon i10 = new ImageIcon("phone.png");
             Image i11 = i10.getImage().getScaledInstance(35, 30, Image.SCALE_DEFAULT);
             ImageIcon i12 =new ImageIcon(i11);
             JLabel phone =new JLabel(i12);
             phone.setBounds(360,20,30,30);
             heading.add(phone);


            
           
       

     
            
            
             
              
                 

            messageArea.setFont(font);
            messageArea.setEditable(false);
            messageInput.setFont(font);
        
              
    
// frame ka layout set frain gy.
          setLayout(new BorderLayout());

            //adding component on frame:
            this.add(heading,BorderLayout.NORTH);
            this.add(messageArea,BorderLayout.CENTER);
            this.add(messageInput,BorderLayout.SOUTH);
            

            setVisible(true);
            
            




        }
    // creation of function 01
    public void startReading() {
        // thread for reading data 
        Runnable r1 = () -> {
            System.out.println("reader started...");

            try {
                while (true) {
                    String msg = br.readLine();
                    if (msg.equals("exit")) {
                        System.out.println("Ali is no more avaliabile in the chat");
                        JOptionPane.showMessageDialog(this,"Ali terminated the caht");
                        messageInput.setEnabled(false);
                        socket.close();
                        break;
                    }
                   // System.out.println("client : " + msg);
                   messageArea.append("Ali:"+ msg+"\n");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        };

        // new thread class ka obejct banaya num ny
        new Thread(r1).start();
    }

    // creation of function 02
    public void startWriting() {
        // thread for writing data 
        Runnable r2 = () -> {
            System.out.println("writer has started");

            try {
                while (true) {
                    BufferedReader br1 = new BufferedReader(new InputStreamReader(System.in));
                    String content = br1.readLine();
                    out.println(content);
                    out.flush();

                    
                    if(content.equals("exit"))
                    {
                        socket.close();
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        };

        // new thread class ka obejct banaya num ny
        new Thread(r2).start();
    }

    public static void main(String[] args) {
        System.out.println("this is server going to start server");

        // object
        new Server();
    }
}



